extends Node


# Aller Ã  la ligne -> Ctrl + L
# DATAS : 32
# DERIVED DATAS : 192
# SAVING : 259
# CONST DATAS : 310
# UPGRADE DATAS : 350


var can_save_data: bool = true
var is_currently_saving: bool = false

#### MEMBERS ####

func _ready():
	var timer: Timer = Timer.new()
	add_child(timer)
	timer.wait_time = 5
	timer.connect("timeout", self, "save_datas")
	timer.start()


###############
#### DATAS ####
#### DATAS ####
#### DATAS ####
#### DATAS ####
#### DATAS ####
#### DATAS ####
#### DATAS ####
#### DATAS ####
###############

# WEALTH #
signal wealth_changed(new_wealth)
signal max_wealth_achieved()
var wealth: int = 0 setget set_wealth

func set_wealth(new_wealth: int):
	wealth = new_wealth
	
	if new_wealth < -1000000000:
		print("Clicks trop bas : ", new_wealth)
		wealth = 9223372036854775807
		print(wealth)
		emit_signal("max_wealth_achieved")
	
	emit_signal("wealth_changed", wealth)

# MOUSE LEVEL #
signal mouse_level_changed(new_mouse_level)
var mouse_level: int = 1 setget set_mouse_level

func set_mouse_level(new_mouse_level: int, save_changes: bool = true):
	mouse_level = new_mouse_level
	emit_signal("mouse_level_changed", new_mouse_level)
	
	if save_changes:
		save_datas()

# VENTIL LEVEL #
signal ventil_level_changed(new_ventil_level)
var ventil_level: int = 1 setget set_ventil_level

func set_ventil_level(new_ventil_level: int, save_changes: bool = true):
	ventil_level = new_ventil_level
	emit_signal("ventil_level_changed", new_ventil_level)
	
	if save_changes:
		save_datas()

# AUTOCLICK LEVEL #
signal autoclick_level_changed(new_autoclick_level)
var autoclick_level: int = 0 setget set_autoclick_level

func set_autoclick_level(new_autoclick_level: int, save_changes: bool = true):
	autoclick_level = new_autoclick_level
	emit_signal("autoclick_level_changed", new_autoclick_level)
	
	if save_changes:
		save_datas()

# ANTIVIRUS LEVEL #
signal antivirus_level_changed(new_antivirus_level)
var antivirus_level: int = 0 setget set_antivirus_level

func set_antivirus_level(new_antivirus_level: int, save_changes: bool = true):
	antivirus_level = new_antivirus_level
	emit_signal("antivirus_level_changed", new_antivirus_level)
	
	if save_changes:
		save_datas()

# ANTIVIRUS LEVEL #
signal antivirus_duration_changed(new_antivirus_duration)
var antivirus_duration: int = 0 setget set_antivirus_duration

func set_antivirus_duration(new_antivirus_duration: int):
	if new_antivirus_duration <= 0:
		antivirus_level = 0
		new_antivirus_duration = 0
	
	antivirus_duration = new_antivirus_duration
	emit_signal("antivirus_duration_changed", new_antivirus_duration)

# TABLE LEVEL #
signal table_level_changed(new_table_level)
var table_level: int = 1 setget set_table_level

func set_table_level(new_table_level: int, save_changes: bool = true):
	table_level = new_table_level
	emit_signal("table_level_changed", new_table_level)
	
	if save_changes:
		save_datas()

# MOUSE SKIN #
signal mouse_skin_changed(new_mouse_skin)
var mouse_skin: String = "base" setget set_mouse_skin

func set_mouse_skin(new_mouse_skin: String, save_changes: bool = true):
	mouse_skin = new_mouse_skin
	emit_signal("mouse_skin_changed", new_mouse_skin)
	
	if save_changes:
		save_datas()

# VENTIL SKIN #
signal ventil_skin_changed(new_ventil_skin)
var ventil_skin: String = "base" setget set_ventil_skin

func set_ventil_skin(new_ventil_skin: String, save_changes: bool = true):
	ventil_skin = new_ventil_skin
	emit_signal("ventil_skin_changed", new_ventil_skin)
	
	if save_changes:
		save_datas()

# AUTOCLICK SKIN #
signal autoclick_skin_changed(new_autoclick_skin)
var autoclick_skin: String = "hiclick" setget set_autoclick_skin

func set_autoclick_skin(new_autoclick_skin: String, save_changes: bool = true):
	autoclick_skin = new_autoclick_skin
	emit_signal("autoclick_skin_changed", new_autoclick_skin)
	
	if save_changes:
		save_datas()

# ANTIVIRUS SKIN #
signal antivirus_skin_changed(new_antivirus_skin)
var antivirus_skin: String = "abast" setget set_antivirus_skin

func set_antivirus_skin(new_antivirus_skin: String, save_changes: bool = true):
	antivirus_skin = new_antivirus_skin
	emit_signal("antivirus_skin_changed", new_antivirus_skin)
	
	if save_changes:
		save_datas()

# TABLE SKIN #
signal table_skin_changed(new_table_skin)
var table_skin: String = "bois" setget set_table_skin

func set_table_skin(new_table_skin: String, save_changes: bool = true):
	table_skin = new_table_skin
	emit_signal("table_skin_changed", new_table_skin)
	
	if save_changes:
		save_datas()

# LOCALE #
signal locale_changed(new_locale)
var locale: String setget set_locale

func set_locale(new_locale: String, save_changes: bool = true):
	locale = new_locale
	TranslationServer.set_locale(new_locale)
	emit_signal("locale_changed", new_locale)
	
	if save_changes:
		save_datas()

# IS AUDIO #
signal is_audio_changed(new_is_audio)
var is_audio: bool setget set_is_audio

func set_is_audio(new_is_audio: bool, save_changes: bool = true):
	is_audio = new_is_audio
	emit_signal("is_audio_changed", new_is_audio)
	
	if save_changes:
		save_datas()

# IS BLACK N WHITE #
signal is_blacknwhite_changed(new_is_blacknwhite)
var is_blacknwhite: bool setget set_is_blacknwhite

func set_is_blacknwhite(new_is_blacknwhite: bool, save_changes: bool = true):
	is_blacknwhite = new_is_blacknwhite
	emit_signal("is_blacknwhite_changed", new_is_blacknwhite)
	
	if save_changes:
		save_datas()

# IS REVERSE SCREEN #
signal is_reverse_screen_changed(new_is_reverse_screen)
var is_reverse_screen: bool setget set_is_reverse_screen

func set_is_reverse_screen(new_is_reverse_screen: bool, save_changes: bool = true):
	is_reverse_screen = new_is_reverse_screen
	emit_signal("is_reverse_screen_changed", new_is_reverse_screen)
	
	if save_changes:
		save_datas()

#### DATAS ####

var datas: Dictionary setget set_datas, get_datas

func set_datas(new_datas: Dictionary):
	set_wealth(new_datas.wealth)
	
	set_mouse_level(new_datas.mouse_level, false)
	set_ventil_level(new_datas.ventil_level, false)
	set_autoclick_level(new_datas.autoclick_level, false)
	set_antivirus_level(new_datas.antivirus_level, false)
	set_antivirus_duration(new_datas.antivirus_duration)
	set_table_level(new_datas.table_level, false)
	
	set_mouse_skin(new_datas.mouse_skin, false)
	set_ventil_skin(new_datas.ventil_skin, false)
	set_autoclick_skin(new_datas.autoclick_skin, false)
	set_antivirus_skin(new_datas.antivirus_skin, false)
	set_table_skin(new_datas.table_skin, false)
	
	set_locale(new_datas.locale, false)
	set_is_audio(new_datas.is_audio, false)
	set_is_blacknwhite(new_datas.is_blacknwhite, false)
	set_is_reverse_screen(new_datas.is_reverse_screen, false)

func get_datas() -> Dictionary:
	return {
		"wealth": wealth,
		
		"mouse_level": mouse_level,
		"ventil_level": ventil_level,
		"autoclick_level": autoclick_level,
		"antivirus_level": antivirus_level,
		"antivirus_duration": antivirus_duration,
		"table_level": table_level,
		
		"mouse_skin": mouse_skin,
		"ventil_skin": ventil_skin,
		"autoclick_skin": autoclick_skin,
		"antivirus_skin": antivirus_skin,
		"table_skin": table_skin,
		
		"locale": locale,
		"is_audio": is_audio,
		"is_blacknwhite": is_blacknwhite,
		"is_reverse_screen": is_reverse_screen
	}


#######################
#### DERIVED DATAS ####
#### DERIVED DATAS ####
#### DERIVED DATAS ####
#### DERIVED DATAS ####
#### DERIVED DATAS ####
#### DERIVED DATAS ####
#### DERIVED DATAS ####
#### DERIVED DATAS ####
#### DERIVED DATAS ####
#### DERIVED DATAS ####
#######################

# WEALTH INCREASE ON CLICK #
var wealth_increase_on_click: int setget , get_wealth_increase_on_click
var wealth_increase_on_click_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 43, 46, 49, 52, 55, 58, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88, 91, 94, 97, 100, 104, 108, 112, 117, 122, 127, 133, 139, 145, 151, 157, 164, 171, 178, 185, 193, 200, 208, 216, 224, 232, 240, 248, 256, 264, 272, 280, 288, 296, 304, 312, 320, 328, 336, 344, 352, 360, 368, 376, 384, 392, 400, 408, 416, 424, 432, 440, 448, 456, 464, 472, 480, 488, 496, 504, 512, 520, 528, 536, 544, 553, 562, 571, 580, 589, 598, 610, 620, 631, 643, 655, 667, 679, 693, 707, 721, 735, 750, 765, 780, 797, 814, 833, 852, 871, 891, 912, 935, 960, 986, 1010, 1035, 1061, 1089, 1119, 1151, 1185, 1221, 1259, 1299, 1341, 1385, 1481, 1584, 1694, 1812, 1938, 2073, 2218, 2373, 2539, 2716, 2906, 3109, 3326, 3558, 3807, 4073, 4358, 4663, 4989, 5338, 5711, 6110, 6537, 6994, 7483, 8006, 8566, 9165, 9806, 10492, 11226, 12011, 12851, 13750, 14712, 15741, 16842, 18020, 19281, 20630, 22074, 23619, 25272, 27041, 28933, 30958, 33125, 35443, 37924, 40578, 43418, 46457, 49708, 53187, 56910, 60893, 65155, 69715, 74595, 79816, 85403, 91381, 97777, 103740, 110060, 116770, 123890, 131440, 139450, 147950, 156970, 166540, 176690, 187460, 198890, 211020, 223890, 237540, 252020, 267390, 283700, 301000, 319360, 338840, 359500, 381420, 404680, 429360, 455550, 483330, 512810, 544090, 577270, 612480, 649840, 689480, 731530, 776150, 823800, 874400, 928100, 985100, 1045600, 1109900, 1178100, 1250500, 1327400, 1409000, 1495600, 1587500, 1685100, 1788700, 1898700, 2015400, 2139300, 2270800, 2410400, 2558600, 2715900, 2882900, 3060100, 3248200, 3447900, 3659900, 3884900, 4123800, 4377400, 4647000, 4933000, 5236000, 5558000, 5900000, 6263000, 6648000, 7057000, 7491000, 7952000, 8441000, 8960000, 9511000, 10096000, 10717000, 11377000, 12077000, 12820000, 13609000, 14447000, 15336000, 16280000, 17282000, 18346000, 19476000, 20675000, 21948000, 23299000, 24734000, 26257000, 27800000, 29500000, 31300000, 33200000, 35200000, 37300000, 39500000, 41900000, 44400000, 47100000, 50000000, 53000000, 56200000, 59600000, 63200000, 67000000, 71100000, 75400000, 80000000, 84900000, 90100000, 95600000, 101000000, 107000000, 113000000, 119000000, 126000000, 133000000, 141000000, 149000000, 158000000, 167000000, 177000000, 187000000, 198000000, 210000000, 222000000, 235000000, 249000000, 264000000, 280000000, 297000000, 315000000, 334000000, 354000000, 375000000, 398000000, 422000000, 447000000, 474000000, 503000000, 533000000, 565000000, 599000000, 635000000, 674000000, 715000000, 759000000, 800000000, 840000000, 890000000, 940000000, 990000000, 1050000000, 1110000000, 1170000000, 1240000000, 1320000000, 1410000000, 1500000000, 1600000000, 1710000000, 1820000000, 1940000000, 2070000000, 2210000000, 2360000000, 2520000000, 2690000000, 2870000000, 3070000000, 3280000000, 3500000000, 3740000000, 4000000000, 4280000000, 4570000000, 4880000000, 5220000000, 5580000000, 5970000000, 6380000000, 6820000000, 7290000000, 7800000000, 8340000000, 8920000000, 9500000000, 10100000000, 10800000000, 11500000000, 12300000000, 13100000000, 14000000000, 14900000000, 15900000000, 17000000000, 18100000000, 19300000000, 20600000000, 22000000000, 23500000000, 25100000000, 26800000000, 28600000000, 30600000000, 32400000000, 34400000000, 36500000000, 38700000000, 41000000000, 43500000000, 46100000000, 48900000000, 51900000000, 55100000000, 58500000000, 62100000000, 65900000000, 69900000000, 74200000000, 78700000000, 83500000000, 88600000000, 94000000000, 99800000000, 105900000000, 112400000000, 119300000000, 126600000000, 134400000000, 142000000000, 150000000000, 159000000000, 168000000000, 178000000000, 189000000000, 200000000000, 212000000000, 225000000000, 238000000000, 252000000000, 267000000000, 283000000000, 300000000000, 318000000000, 337000000000, 357000000000, 379000000000, 402000000000, 426000000000, 452000000000, 479000000000, 508000000000, 539000000000, 572000000000, 607000000000, 644000000000, 683000000000, 725000000000, 769000000000, 816000000000, 866000000000, 919000000000, 975000000000, 1035000000000, 1099000000000, 1167000000000, 1239000000000, 1315000000000, 1396000000000, 1480000000000, 1570000000000, 1660000000000, 1760000000000, 1860000000000, 1970000000000, 2090000000000, 2210000000000, 2340000000000, 2480000000000, 2630000000000, 2790000000000, 2960000000000, 3250000000000, 3570000000000, 3920000000000, 4310000000000, 4740000000000, 6160000000000, 8000000000000, 10400000000000, 250000000000000]

func get_wealth_increase_on_click():
	return wealth_increase_on_click_list[mouse_level-1]

# HEAT INCREASE ON CLICK #
var heat_increase_on_click: float setget , get_heat_increase_on_click
var heat_increase_on_click_list = [1.0000000000000000000, 0.6660000000000000000, 0.5000000000000000000, 0.1000000000000000000, 0.2857142857142860000, 0.2500000000000000000, 0.2352941176470590000, 0.2222222222222220000, 0.2105263157894740000, 0.2000000000000000000, 0.1818181818181820000, 0.1666666666666670000, 0.1538461538461540000, 0.1428571428571430000, 0.1333333333333330000, 0.1250000000000000000, 0.1176470588235290000, 0.1111111111111110000, 0.1052631578947370000, 0.1000000000000000000, 0.0930232558139535000, 0.0869565217391304000, 0.0816326530612245000, 0.0769230769230769000, 0.0727272727272727000, 0.0689655172413793000, 0.0655737704918033000, 0.0625000000000000000, 0.0597014925373134000, 0.0571428571428571000, 0.0547945205479452000, 0.0526315789473684000, 0.0506329113924051000, 0.0487804878048781000, 0.0470588235294118000, 0.0454545454545455000, 0.0439560439560440000, 0.0425531914893617000, 0.0412371134020619000, 0.0400000000000000000, 0.0384615384615385000, 0.0370370370370370000, 0.0357142857142857000, 0.0341880341880342000, 0.0327868852459016000, 0.0314960629921260000, 0.0300751879699248000, 0.0287769784172662000, 0.0275862068965517000, 0.0264900662251656000, 0.0254777070063694000, 0.0243902439024390000, 0.0233918128654971000, 0.0224719101123596000, 0.0216216216216216000, 0.0207253886010363000, 0.0200000000000000000, 0.0192307692307692000, 0.0185185185185185000, 0.0178571428571429000, 0.0172413793103448000, 0.0166666666666667000, 0.0161290322580645000, 0.0156250000000000000, 0.0151515151515152000, 0.0147058823529412000, 0.0142857142857143000, 0.0138888888888889000, 0.0135135135135135000, 0.0131578947368421000, 0.0128205128205128000, 0.0125000000000000000, 0.0121951219512195000, 0.0119047619047619000, 0.0116279069767442000, 0.0113636363636364000, 0.0111111111111111000, 0.0108695652173913000, 0.0106382978723404000, 0.0104166666666667000, 0.0102040816326531000, 0.0100000000000000000, 0.0098039215686274500, 0.0096153846153846200, 0.0094339622641509400, 0.0092592592592592600, 0.0090909090909090900, 0.0089285714285714300, 0.0087719298245614000, 0.0086206896551724100, 0.0084745762711864400, 0.0083333333333333300, 0.0081967213114754100, 0.0080645161290322600, 0.0079365079365079400, 0.0078125000000000000, 0.0076923076923076900, 0.0075757575757575800, 0.0074626865671641800, 0.0073529411764705900, 0.0072332730560578700, 0.0071174377224199300, 0.0070052539404553400, 0.0068965517241379300, 0.0067911714770798000, 0.0066889632107023400, 0.0065573770491803300, 0.0064516129032258100, 0.0063391442155309000, 0.0062208398133748100, 0.0061068702290076300, 0.0059970014992503800, 0.0058910162002945500, 0.0057720057720057700, 0.0056577086280056600, 0.0055478502080443800, 0.0054421768707483000, 0.0053333333333333300, 0.0052287581699346400, 0.0051282051282051300, 0.0050188205771643700, 0.0049140049140049100, 0.0048019207683073200, 0.0046948356807511700, 0.0045924225028702600, 0.0044893378226711600, 0.0043859649122807000, 0.0042780748663101600, 0.0041666666666666700, 0.0040567951318458400, 0.0039603960396039600, 0.0038647342995169100, 0.0037700282752120600, 0.0036730945821854900, 0.0035746201966041100, 0.0034752389226759300, 0.0033755274261603400, 0.0032760032760032800, 0.0031771247021445600, 0.0030792917628945300, 0.0029828486204325100, 0.0028880866425992800, 0.0027008777852802200, 0.0025252525252525300, 0.0023612750885478200, 0.0022075055187638000, 0.0020639834881320900, 0.0019295706705258100, 0.0018034265103697000, 0.0016856300042140800, 0.0015754233950374200, 0.0014727540500736400, 0.0013764624913971100, 0.0012865873271148300, 0.0012026458208057700, 0.0011242270938729600, 0.0010506960861570800, 0.0009820770930518050, 0.0009178522257916480, 0.0008578168561012220, 0.0008017638805371820, 0.0007493443237167480, 0.0007004027315706530, 0.0006546644844517190, 0.0006119014838610980, 0.0005719187875321710, 0.0005345449685954830, 0.0004996252810392210, 0.0004669624095260330, 0.0004364429896344790, 0.0004079135223332650, 0.0003812428516965310, 0.0003563156957063960, 0.0003330280576138540, 0.0003112598241381990, 0.0002909090909090910, 0.0002718868950516590, 0.0002541134616606310, 0.0002375014843842770, 0.0002219755826859050, 0.0002074581193921480, 0.0001938923897237030, 0.0001812086617740330, 0.0001693551801515730, 0.0001582779360557140, 0.0001479235235383310, 0.0001382504406732800, 0.0001292073131339230, 0.0001207547169811320, 0.0001128572637756400, 0.0001054741061069510, 0.0000985755828281335, 0.0000921276889769220, 0.0000861011257722195, 0.0000804699444757383, 0.0000752063474157219, 0.0000702864171498858, 0.0000656889954510371, 0.0000613920650755890, 0.0000573764613067489, 0.0000536228969770092, 0.0000501152651097524, 0.0000468367621746309, 0.0000437727755222639, 0.0000409094163249026, 0.0000385579332947754, 0.0000363438124659277, 0.0000342553738117667, 0.0000322867059488256, 0.0000304321363359708, 0.0000286841161706705, 0.0000270361608651571, 0.0000254825762884628, 0.0000240182538729434, 0.0000226385194408286, 0.0000213378854155553, 0.0000201116194881593, 0.0000189555492370391, 0.0000178659162981821, 0.0000168392691757178, 0.0000158717562098246, 0.0000149594225662889, 0.0000140994007754670, 0.0000132890365448505, 0.0000125250501002004, 0.0000118049817022784, 0.0000111265646731572, 0.0000104871270515442, 0.0000098843530690916, 0.0000093161915408981, 0.0000087805948853035, 0.0000082759191442700, 0.0000078001599032780, 0.0000073517248984543, 0.0000069291665944879, 0.0000065308254963427, 0.0000061553613197095, 0.0000058014735742879, 0.0000054679917433325, 0.0000051536429813825, 0.0000048555474629765, 0.0000045745654162855, 0.0000043098804008189, 0.0000040605014719318, 0.0000038255547054323, 0.0000036039282818272, 0.0000033952975129446, 0.0000031987205117953, 0.0000030134096730451, 0.0000028388928317956, 0.0000026745119015780, 0.0000025196850393701, 0.0000023737463652009, 0.0000022362609716554, 0.0000021067045873492, 0.0000019847176739109, 0.0000018697704856729, 0.0000017614937466972, 0.0000016594756057086, 0.0000014728082771825, 0.0000013071468252672, 0.0000011601264537835, 0.0000010296275322402, 0.0000009137844382510, 0.0000008108655990270, 0.0000007196833393307, 0.0000006386715631487, 0.0000005668130933825, 0.0000005030181086519, 0.0000004464285714286, 0.0000003961965134707, 0.0000003515865342357, 0.0000003120124804992, 0.0000002768740915069, 0.0000002457002457002, 0.0000002180311784585, 0.0000001934703748489, 0.0000001716811880338, 0.0000001523403282934, 0.0000001355932203390, 0.0000001204819277108, 0.0000001072386058981, 0.0000000954653937947, 0.0000000849256900212, 0.0000000754716981132, 0.0000000671140939597, 0.0000000597014925373, 0.0000000530503978780, 0.0000000471142520612, 0.0000000418410041841, 0.0000000373831775701, 0.0000000336134453782, 0.0000000300751879699, 0.0000000268456375839, 0.0000000239520958084, 0.0000000213903743316, 0.0000000190476190476, 0.0000000170212765957, 0.0000000151515151515, 0.0000000134680134680, 0.0000000119760479042, 0.0000000106666666667, 0.0000000094786729858, 0.0000000084388185654, 0.0000000075046904315, 0.0000000066777963272, 0.0000000059347181009, 0.0000000052700922266, 0.0000000047619047619, 0.0000000042553191489, 0.0000000038095238095, 0.0000000034188034188, 0.0000000030303030303, 0.0000000026666666667, 0.0000000023391812865, 0.0000000020618556701, 0.0000000018099547511, 0.0000000015873015873, 0.0000000013937282230, 0.0000000012195121951, 0.0000000010695187166, 0.0000000009345794393, 0.0000000008196721311, 0.0000000007168458781, 0.0000000006269592476, 0.0000000005486968450, 0.0000000004796163070, 0.0000000004210526316, 0.0000000003703703704, 0.0000000003252032520, 0.0000000002857142857, 0.0000000002515723270, 0.0000000002209944751, 0.0000000001941747573, 0.0000000001702127660, 0.0000000001492537313, 0.0000000001307189542, 0.0000000001162790698, 0.0000000001033591731, 0.0000000000919540230, 0.0000000000817995910, 0.0000000000725952813, 0.0000000000644122383, 0.0000000000572246066, 0.0000000000508259212, 0.0000000000451467269, 0.0000000000400801603, 0.0000000000355871886, 0.0000000000315955766, 0.0000000000281690141, 0.0000000000251572327, 0.0000000000224719101, 0.0000000000200000000, 0.0000000000177777778, 0.0000000000158730159, 0.0000000000141342756, 0.0000000000125786164, 0.0000000000112044818, 0.0000000000099502488, 0.0000000000078740157, 0.0000000000065897858, 0.0000000000055172414, 0.0000000000046189376, 0.0000000000038647343, 0.0000000000032284100, 0.0000000000027027027, 0.0000000000022727273, 0.0000000000019138756, 0.0000000000016129032, 0.0000000000013513514, 0.0000000000010204082, 0.0000000000006493506, 0.0000000000000160000]

func get_heat_increase_on_click():
	return heat_increase_on_click_list[ventil_level-1] 

# CLICKS PER SECONDS #
var clicks_per_seconds: int setget , get_clicks_per_seconds
var clicks_per_seconds_list = [0, 10, 15, 22, 30, 38, 47, 60, 78, 100, 126, 154, 184, 216, 250, 285, 321, 359, 399, 443, 496, 559, 631, 719, 831, 961, 1135, 1505, 2141, 3045, 4325, 6136, 8698, 12317, 17425, 24628, 34774, 49049, 69114, 97292, 131136, 176574, 237537, 319241, 428613, 574896, 770343, 1033217, 1384782, 1854071, 2479842, 3313421, 4423231, 5898409, 7857194, 10455684, 13899908, 18460263, 24425293, 32211323, 42390442, 55699975, 73360293, 94776800, 122936751, 159423115, 207119575, 269919411, 351805648, 457405331, 585185037, 744193036, 982943293, 1309174006, 1750659040, 2345297012, 3137768364, 4196359038, 5528342176, 7287432271, 9592366527, 12663292889, 16064745880, 20388702230, 25858733923, 32662057057, 41179841385, 50891984861, 63273150607, 78313434003, 96784954106, 119359348119, 146673176811, 179486940679, 218836977375, 261876710839, 311367079889, 396493636185, 778858500505]

func get_clicks_per_seconds():
	return clicks_per_seconds_list[autoclick_level]

# ANTIVIRUS PROBA TUER VIRUS #
var antivirus_proba_tue_virus: float setget , get_antivirus_proba_tue_virus

func get_antivirus_proba_tue_virus():
	return atan(antivirus_level)/(PI/2)

# MOUSE UPGRADE PRICE #
var mouse_upgrade_price: int setget , get_mouse_upgrade_price
var mouse_upgrade_price_list = [200, 400, 650, 900, 954, 1011, 1071, 1130, 1190, 1260, 1330, 1400, 1480, 1560, 1650, 1740, 1840, 1950, 2060, 2180, 2310, 2440, 2580, 2730, 2890, 3060, 3240, 3430, 3630, 3840, 4070, 4310, 4560, 4830, 5110, 5410, 5730, 6070, 6430, 6810, 7210, 7640, 8090, 8570, 9080, 9600, 10100, 10700, 11300, 11900, 12600, 13300, 14000, 14800, 15600, 16500, 17400, 18400, 19500, 20600, 21800, 23100, 24400, 25800, 27300, 28900, 30600, 32400, 34300, 36300, 38400, 40700, 43100, 45600, 48300, 51100, 54100, 57300, 60700, 64300, 68100, 72100, 76400, 80900, 85700, 90800, 96200, 101900, 108000, 114400, 121200, 128400, 136100, 144200, 152800, 161900, 171600, 181800, 192700, 204200, 207000, 210000, 213000, 216000, 219000, 222000, 225000, 228000, 231000, 234000, 237000, 240000, 243000, 246000, 249000, 252000, 257000, 261000, 265000, 270000, 275000, 280000, 285000, 290000, 295000, 300000, 305000, 311000, 317000, 323000, 330000, 337000, 344000, 351000, 358000, 366000, 374000, 383000, 393000, 403000, 412000, 422000, 432000, 443000, 455000, 468000, 481000, 495000, 510000, 526000, 543000, 560000, 598000, 639000, 683000, 730000, 780000, 834000, 892000, 950000, 1010000, 1080000, 1150000, 1230000, 1310000, 1400000, 1490000, 1590000, 1700000, 1810000, 1930000, 2060000, 2200000, 2350000, 2510000, 2680000, 2860000, 3050000, 3260000, 3480000, 3720000, 3980000, 4250000, 4540000, 4850000, 5180000, 5540000, 5920000, 6330000, 6770000, 7240000, 7740000, 8280000, 8850000, 9460000, 10120000, 10820000, 11570000, 12370000, 13200000, 14100000, 15000000, 16000000, 17100000, 18200000, 19400000, 20700000, 22100000, 23600000, 25200000, 26900000, 28700000, 30700000, 32800000, 35000000, 37100000, 39300000, 41700000, 44200000, 46800000, 49600000, 52600000, 55800000, 59200000, 62800000, 66600000, 70600000, 74900000, 79400000, 84200000, 89300000, 94700000, 100400000, 106500000, 113000000, 119900000, 127000000, 134000000, 142000000, 150000000, 159000000, 168000000, 178000000, 188000000, 199000000, 211000000, 223000000, 236000000, 250000000, 265000000, 281000000, 298000000, 316000000, 335000000, 355000000, 376000000, 399000000, 423000000, 449000000, 476000000, 505000000, 536000000, 568000000, 602000000, 639000000, 678000000, 719000000, 763000000, 809000000, 850000000, 900000000, 950000000, 1000000000, 1060000000, 1120000000, 1180000000, 1250000000, 1320000000, 1400000000, 1480000000, 1570000000, 1660000000, 1760000000, 1860000000, 1970000000, 2090000000, 2200000000, 2300000000, 2400000000, 2500000000, 2600000000, 2700000000, 2800000000, 2900000000, 3000000000, 3100000000, 3200000000, 3300000000, 3500000000, 3700000000, 3900000000, 4100000000, 4300000000, 4500000000, 4700000000, 4900000000, 5200000000, 5500000000, 5800000000, 6100000000, 6400000000, 6700000000, 7100000000, 7500000000, 7900000000, 8300000000, 8800000000, 9300000000, 9800000000, 10000000000, 10600000000, 11200000000, 11800000000, 12500000000, 13200000000, 14000000000, 14800000000, 15700000000, 16600000000, 17700000000, 18870000000, 20030000000, 21320000000, 22620000000, 23940000000, 25470000000, 27010000000, 28770000000, 30550000000, 32550000000, 34570000000, 36820000000, 39090000000, 41590000000, 44330000000, 47090000000, 50090000000, 53330000000, 56820000000, 60560000000, 64550000000, 68800000000, 73310000000, 78080000000, 83120000000, 88650000000, 94460000000, 100500000000, 107100000000, 114200000000, 121600000000, 129500000000, 137900000000, 146900000000, 156700000000, 167000000000, 178100000000, 188600000000, 199000000000, 211800000000, 224800000000, 237900000000, 253500000000, 269300000000, 285200000000, 303700000000, 324900000000, 348700000000, 372800000000, 399600000000, 429200000000, 459000000000, 491700000000, 527000000000, 565000000000, 606000000000, 650000000000, 697000000000, 747000000000, 803000000000, 862000000000, 924000000000, 992000000000, 1066000000000, 1146000000000, 1229000000000, 1318000000000, 1416000000000, 1521000000000, 1635000000000, 1756000000000, 1886000000000, 2026000000000, 2178000000000, 2340000000000, 2515000000000, 2690000000000, 2870000000000, 3080000000000, 3290000000000, 3530000000000, 3770000000000, 4040000000000, 4320000000000, 4630000000000, 4970000000000, 5310000000000, 5690000000000, 6100000000000, 6540000000000, 7020000000000, 7530000000000, 8080000000000, 8660000000000, 9310000000000, 9900000000000, 10560000000000, 11260000000000, 11990000000000, 12760000000000, 13600000000000, 14480000000000, 15400000000000, 16400000000000, 17400000000000, 18500000000000, 19700000000000, 21000000000000, 22300000000000, 23700000000000, 25200000000000, 26800000000000, 28500000000000, 30300000000000, 32300000000000, 34400000000000, 36600000000000, 39000000000000, 41500000000000, 44200000000000, 46900000000000, 49700000000000, 52900000000000, 56100000000000, 59700000000000, 63700000000000, 67700000000000, 72100000000000, 76900000000000, 81700000000000, 86900000000000, 92500000000000, 98500000000000, 104900000000000, 111700000000000, 118900000000000, 126500000000000, 134900000000000, 143800000000000, 153000000000000, 163000000000000, 173000000000000, 184000000000000, 196000000000000, 209000000000000, 222000000000000, 236000000000000, 251000000000000, 267000000000000, 284000000000000, 302000000000000, 322000000000000, 343000000000000, 365000000000000, 389000000000000, 415000000000000, 442000000000000, 471000000000000, 502000000000000, 535000000000000, 570000000000000, 607000000000000, 645000000000000, 687000000000000, 729000000000000, 775000000000000, 826000000000000, 877000000000000, 933000000000000, 993000000000000, 1058000000000000, 1127000000000000, 1201000000000000, 1325000000000000, 1462000000000000, 1613000000000000, 1782000000000000, 1969000000000000, 2571000000000000, 3355000000000000, 78894000000000000]

func get_mouse_upgrade_price():
	return mouse_upgrade_price_list[mouse_level-1]

# VENTIL UPGRADE PRICE #
var ventil_upgrade_price: int setget , get_ventil_upgrade_price
var ventil_upgrade_price_list = [900, 1011, 1130, 1260, 1400, 1560, 1740, 1840, 1950, 2060, 2180, 2310, 2440, 2580, 2730, 2890, 3060, 3240, 3430, 3630, 3840, 4070, 4310, 4560, 4830, 5110, 5410, 5730, 6070, 6430, 6810, 7210, 7640, 8090, 8570, 9080, 9600, 10100, 10700, 11300, 11900, 12600, 13300, 14000, 14800, 15600, 16500, 17400, 18400, 19500, 20600, 21800, 23100, 24400, 25800, 27300, 28900, 30600, 32400, 34300, 36300, 38400, 40700, 43100, 45600, 48300, 51100, 54100, 57300, 60700, 64300, 68100, 72100, 76400, 80900, 85700, 90800, 96200, 101900, 108000, 114400, 121200, 128400, 136100, 144200, 152800, 161900, 171600, 181800, 192700, 204200, 207000, 210000, 213000, 216000, 219000, 222000, 225000, 228000, 231000, 234000, 237000, 240000, 243000, 246000, 249000, 252000, 257000, 261000, 265000, 270000, 275000, 280000, 285000, 290000, 295000, 300000, 305000, 311000, 317000, 323000, 330000, 337000, 344000, 351000, 358000, 366000, 374000, 383000, 393000, 403000, 412000, 422000, 432000, 443000, 455000, 468000, 481000, 495000, 510000, 526000, 543000, 560000, 598000, 639000, 683000, 730000, 780000, 834000, 892000, 950000, 1010000, 1080000, 1150000, 1230000, 1310000, 1400000, 1490000, 1590000, 1700000, 1810000, 1930000, 2060000, 2200000, 2350000, 2510000, 2680000, 2860000, 3050000, 3260000, 3480000, 3720000, 3980000, 4250000, 4540000, 4850000, 5180000, 5540000, 5920000, 6330000, 6770000, 7240000, 7740000, 8280000, 8850000, 9460000, 10120000, 10820000, 11570000, 12370000, 13200000, 14100000, 15000000, 16000000, 17100000, 18200000, 19400000, 20700000, 22100000, 23600000, 25200000, 26900000, 28700000, 30700000, 32800000, 35000000, 37100000, 39300000, 41700000, 44200000, 46800000, 49600000, 52600000, 55800000, 59200000, 62800000, 66600000, 70600000, 74900000, 79400000, 84200000, 89300000, 94700000, 100400000, 106500000, 113000000, 119900000, 127000000, 134000000, 142000000, 150000000, 159000000, 168000000, 178000000, 188000000, 199000000, 211000000, 223000000, 236000000, 250000000, 265000000, 281000000, 298000000, 316000000, 335000000, 355000000, 376000000, 399000000, 423000000, 449000000, 476000000, 505000000, 536000000, 568000000, 602000000, 639000000, 678000000, 719000000, 763000000, 809000000, 900000000, 1000000000, 1120000000, 1250000000, 1400000000, 1570000000, 1760000000, 1970000000, 2200000000, 2400000000, 2600000000, 2800000000, 3000000000, 3200000000, 3500000000, 3900000000, 4300000000, 4700000000, 5200000000, 5800000000, 6400000000, 7100000000, 7900000000, 8800000000, 9800000000, 10600000000, 11800000000, 13200000000, 14800000000, 16600000000, 18870000000, 21320000000, 23940000000, 27010000000, 30550000000, 34570000000, 39090000000, 44330000000, 50090000000, 56820000000, 64550000000, 73310000000, 83120000000, 94460000000, 107100000000, 121600000000, 137900000000, 156700000000, 178100000000, 199000000000, 224800000000, 253500000000, 285200000000, 324900000000, 372800000000, 429200000000, 491700000000, 565000000000, 650000000000, 747000000000, 862000000000, 992000000000, 1146000000000, 1318000000000, 1521000000000, 1756000000000, 2026000000000, 2340000000000, 2690000000000, 3080000000000, 3530000000000, 4040000000000, 4630000000000, 5310000000000, 6100000000000, 7020000000000, 8080000000000, 9310000000000, 10560000000000, 11990000000000, 13600000000000, 15400000000000, 17400000000000, 19700000000000, 22300000000000, 25200000000000, 28500000000000, 32300000000000, 36600000000000, 41500000000000, 46900000000000, 52900000000000, 59700000000000, 67700000000000, 76900000000000, 86900000000000, 98500000000000, 111700000000000, 126500000000000, 143800000000000, 173000000000000, 209000000000000, 251000000000000, 302000000000000, 365000000000000, 442000000000000, 535000000000000, 645000000000000, 775000000000000, 933000000000000, 1127000000000000, 1462000000000000, 1969000000000000, 2571000000000000]

func get_ventil_upgrade_price():
	return ventil_upgrade_price_list[ventil_level-1]

# AUTOCLICK UPGRADE PRICE #
var autoclick_upgrade_price: int setget , get_autoclick_upgrade_price
var autoclick_upgrade_price_list = [2441, 2891, 3841, 5111, 6811, 9081, 11901, 15601, 20601, 27301, 36301, 48301, 64301, 85701, 114401, 152801, 204201, 219001, 234001, 249001, 270001, 295001, 323001, 358001, 403001, 455001, 526001, 683001, 950001, 1310001, 1810001, 2510001, 3480001, 4850001, 6770001, 9460001, 13200001, 18200001, 25200001, 35000001, 46800001, 62800001, 84200001, 113000001, 150000001, 199000001, 265000001, 355000001, 476000001, 639000001, 850000001, 1120000001, 1480000001, 1970000001, 2500000001, 3000000001, 3700000001, 4700000001, 6100000001, 7900000001, 10000000001, 13200000001, 17700000001, 23940000001, 32550000001, 44330000001, 60560000001, 83120000001, 114200000001, 156700000001, 211800000001, 285200000001, 399600000001, 565000000001, 803000000001, 1146000000001, 1635000000001, 2340000000001, 3290000000001, 4630000000001, 6540000000001, 9310000000001, 12760000000001, 17400000000001, 23700000000001, 32300000000001, 44200000000001, 59700000000001, 81700000000001, 111700000000001, 153000000000001, 209000000000001, 284000000000001, 389000000000001, 535000000000001, 729000000000001, 993000000000001, 1462000000000000, 3355000000000000]

func get_autoclick_upgrade_price():
	return autoclick_upgrade_price_list[autoclick_level]

# ANTIVIRUS UPGRADE PRICE #
var antivirus_upgrade_price: int setget , get_antivirus_upgrade_price

func get_antivirus_upgrade_price():
	return 500 + antivirus_level*antivirus_level * 250

# TABLE UPGRADE PRICE #
var table_upgrade_price: int setget , get_table_upgrade_price

func get_table_upgrade_price():
	return 2500 + table_level*table_level * 5000

################################
#### SAVING / LOADING FUNCS ####
#### SAVING / LOADING FUNCS ####
#### SAVING / LOADING FUNCS ####
#### SAVING / LOADING FUNCS ####
#### SAVING / LOADING FUNCS ####
#### SAVING / LOADING FUNCS ####
#### SAVING / LOADING FUNCS ####
#### SAVING / LOADING FUNCS ####
#### SAVING / LOADING FUNCS ####
#### SAVING / LOADING FUNCS ####
################################

signal _data_loaded()
signal _data_saved(is_error)

func load_datas():
	var result = config_file.load(SAVE_PATH)
	
	if not result == OK:
		print("Failed loading datas file. Error code is %s" % result)
		
		set_datas(base_data)
		
		print("Setting locale to ", OS.get_locale_language())
		set_locale(OS.get_locale_language(), false)
		return
	
	var loaded_datas: Dictionary = base_data.duplicate()
	
	for key in loaded_datas.keys(): 
		loaded_datas[key] = config_file.get_value("datas", key, loaded_datas[key])
	
	print("loaded data : ", JSON.print(loaded_datas, "\t"))
	
	set_datas(loaded_datas)
	
#	print("new datas: ", JSON.print(self.datas, "\t"))
	emit_signal("_data_loaded")

func save_datas(other_datas = null, force_saving = false):
	if (can_save_data and not is_currently_saving) or force_saving:
		is_currently_saving = true
		
		if other_datas == null:
			var save_datas = self.datas
			
			for key in save_datas.keys():
				config_file.set_value("datas", key, save_datas[key])
#			print("saved datas: ", JSON.print(save_datas, "\t"))
		
		else:
			for key in other_datas.keys():
				config_file.set_value("datas", key, other_datas[key])
#			print("saved datas: ", JSON.print(other_datas, "\t"))
		
		var result = config_file.save(SAVE_PATH)
		
		if not result == OK:
			printerr("Sauvegarde impossible")
			emit_signal("_data_saved", true)
		
		else:
#			print("saved")
			emit_signal("_data_saved", false)
		
		is_currently_saving = false

#####################
#### CONST DATAS ####
#### CONST DATAS ####
#### CONST DATAS ####
#### CONST DATAS ####
#### CONST DATAS ####
#### CONST DATAS ####
#### CONST DATAS ####
#### CONST DATAS ####
#### CONST DATAS ####
#### CONST DATAS ####
#### CONST DATAS ####
#### CONST DATAS ####
#### CONST DATAS ####
#### CONST DATAS ####
#####################

const SAVE_PATH = "user://datas.cfg"

var config_file = ConfigFile.new()
const base_data = {
	wealth = 0,
	
	mouse_level = 1,
	ventil_level = 1,
	autoclick_level = 0,
	antivirus_level = 0,
	antivirus_duration = 0,
	table_level = 1,
	
	mouse_skin = "base",
	ventil_skin = "base",
	autoclick_skin = "hiclick",
	antivirus_skin = "abast",
	table_skin = "bois",
	
	locale = "fr",
	is_audio = true,
	is_blacknwhite = false,
	is_reverse_screen = false
}

const upgrades_data = {
	mouse = {
		max_upgrade_level = 512,
		
		mouses_list = [
			"base", "triangle", "blanche", "mieux", "amongus",
			"coccinelle", "gold", "g", "gamerwhite", "gamerviolet",
			"gamerpink", "gamerblue", "gamercyan", "gamergreen",
			"gameryell", "gamerorange", "gamerred"
		],
		base = {
			unlock_level = 0,
			unlock_message = "mouse_base_upgrade_message",
			wireless = false,
			
			skin_menu_name = "base_mouse_desc",
			texture = "res://assets/sprites/souris101.png",
			tex_ture = "res://assets/sprites/souris1.201.png"
		},
		triangle = {
			unlock_level = 10,
			unlock_message = "mouse_triangle_upgrade_message",
			wireless = false,
			
			skin_menu_name = "triangle_mouse_desc",
			texture = "res://assets/sprites/GrosseSourisTriangle01.png",
			tex_ture = "res://assets/sprites/GrosseSourisTriangle02.png"
		},
		blanche = {
			unlock_level = 20,
			unlock_message = "mouse_blanche_upgrade_message",
			wireless = false,
			
			skin_menu_name = "blanche_mouse_desc",
			texture = "res://assets/sprites/SourisBlanche02.png",
			tex_ture = "res://assets/sprites/SourisBlanche01.png"
		},
		mieux = {
			unlock_level = 30,
			unlock_message = "mouse_mieux_upgrade_message",
			wireless = false,
			
			skin_menu_name = "mieux_mouse_desc",
			texture = "res://assets/sprites/SourisMieux01.png",
			tex_ture = "res://assets/sprites/SourisMieux02.png"
		},
		amongus = {
			unlock_level = 40,
			unlock_message = "mouse_amongus_upgrade_message",
			wireless = true,
			
			skin_menu_name = "amongus_mouse_desc",
			texture = "res://assets/sprites/VirusPoulpe01.png",
			tex_ture = "res://assets/sprites/VirusPoulpe02.png"
		},
		coccinelle = {
			unlock_level = 50,
			unlock_message = "mouse_coccinelle_upgrade_message",
			wireless = true,
			
			skin_menu_name = "coccinelle_mouse_desc",
			texture = "res://assets/sprites/coxy01.png",
			tex_ture = "res://assets/sprites/coxy12.png"
		},
		gold = {
			unlock_level = 55,
			unlock_message = "mouse_gold_upgrade_message",
			wireless = false,
			
			skin_menu_name = "gold_mouse_desc",
			texture = "res://assets/sprites/souris_gold01.png",
			tex_ture = "res://assets/sprites/souris_gold02.png"
		},
		g = {
			unlock_level = 57,
			unlock_message = "mouse_g_upgrade_message",
			wireless = true,
			
			skin_menu_name = "g_mouse_desc",
			texture = "res://assets/sprites/souris_de_jeu1.png",
			tex_ture = "res://assets/sprites/souris_de_jeu2.png"
		},
		gamerblue = {
			unlock_level = 60,
			unlock_message = "mouse_gamer_upgrade_message",
			wireless = true,
			
			gamer_mouse_color = "color_blue",
			skin_menu_name = "gamerblue_mouse_desc",
			texture = "res://assets/sprites/souris_gamer/souris_gamer_blue01.png",
			tex_ture = "res://assets/sprites/souris_gamer/souris_gamer_blue02.png"
		},
		gamercyan = {
			unlock_level = 70,
			unlock_message = "mouse_gamer_upgrade_message",
			wireless = true,
			
			gamer_mouse_color = "color_cyan",
			skin_menu_name = "gamercyan_mouse_desc",
			texture = "res://assets/sprites/souris_gamer/souris_gamer_cyan01.png",
			tex_ture = "res://assets/sprites/souris_gamer/souris_gamer_cyan02.png"
		},
		gamergreen = {
			unlock_level = 80,
			unlock_message = "mouse_gamer_upgrade_message",
			wireless = true,
			
			gamer_mouse_color = "color_green",
			skin_menu_name = "gamergreen_mouse_desc",
			texture = "res://assets/sprites/souris_gamer/souris_gamer_green01.png",
			tex_ture = "res://assets/sprites/souris_gamer/souris_gamer_green02.png"
		},
		gamerorange = {
			unlock_level = 90,
			unlock_message = "mouse_gamer_upgrade_message",
			wireless = true,
			
			gamer_mouse_color = "color_orange",
			skin_menu_name = "gamerorange_mouse_desc",
			texture = "res://assets/sprites/souris_gamer/souris_gamer_orange01.png",
			tex_ture = "res://assets/sprites/souris_gamer/souris_gamer_orange02.png"
		},
		gamerpink = {
			unlock_level = 100,
			unlock_message = "mouse_gamer_upgrade_message",
			wireless = true,
			
			gamer_mouse_color = "color_pink",
			skin_menu_name = "gamerpink_mouse_desc",
			texture = "res://assets/sprites/souris_gamer/souris_gamer_pink01.png",
			tex_ture = "res://assets/sprites/souris_gamer/souris_gamer_pink02.png"
		},
		gamerred = {
			unlock_level = 110,
			unlock_message = "mouse_gamer_upgrade_message",
			wireless = true,
			
			gamer_mouse_color = "color_red",
			skin_menu_name = "gamerred_mouse_desc",
			texture = "res://assets/sprites/souris_gamer/souris_gamer_red01.png",
			tex_ture = "res://assets/sprites/souris_gamer/souris_gamer_red02.png"
		},
		gamerviolet = {
			unlock_level = 120,
			unlock_message = "mouse_gamer_upgrade_message",
			wireless = true,
			
			gamer_mouse_color = "color_violet",
			skin_menu_name = "gamerviolet_mouse_desc",
			texture = "res://assets/sprites/souris_gamer/souris_gamer_violet01.png",
			tex_ture = "res://assets/sprites/souris_gamer/souris_gamer_violet02.png"
		},
		gamerwhite = {
			unlock_level = 130,
			unlock_message = "mouse_gamer_upgrade_message",
			wireless = true,
			
			gamer_mouse_color = "color_white",
			skin_menu_name = "gamerwhite_mouse_desc",
			texture = "res://assets/sprites/souris_gamer/souris_gamer_white01.png",
			tex_ture = "res://assets/sprites/souris_gamer/souris_gamer_white02.png"
		},
		gameryell = {
			unlock_level = 140,
			unlock_message = "mouse_gamer_upgrade_message",
			wireless = true,
			
			gamer_mouse_color = "color_yellow",
			skin_menu_name = "gameryell_mouse_desc",
			texture = "res://assets/sprites/souris_gamer/souris_gamer_yell01.png",
			tex_ture = "res://assets/sprites/souris_gamer/souris_gamer_yell02.png"
		}
	},
	ventil = {
		max_upgrade_level = 373,
		
		ventils_list = ["base", "pink", "minitel"],
		base = {
			unlock_level = 0,
			unlock_message = "ventil_base_upgrade_message",
			skin_menu_name = "base_computer_desc",
			
			texture_wire_off = "res://assets/sprites/ordi_wire_off.png",
			texture_wire_ok = "res://assets/sprites/ordi_wire_ok.png",
			texture_wire_wrong = "res://assets/sprites/ordi_wire_wrong.png",
			texture_wireless_off = "res://assets/sprites/ordi_wireless_off.png",
			texture_wireless_ok = "res://assets/sprites/ordi_wireless_ok.png",
			texture_wireless_wrong = "res://assets/sprites/ordi_wireless_wrong.png",
			
			fond_texture = "res://assets/sprites/window.png"
		},
		pink = {
			unlock_level = 10,
			unlock_message = "ventil_pink_upgrade_message",
			skin_menu_name = "pink_computer_desc",
			
			texture_wire_off = "res://assets/sprites/OrdiPink05.png",
			texture_wire_ok = "res://assets/sprites/OrdiPink01.png",
			texture_wire_wrong = "res://assets/sprites/OrdiPink02.png",
			texture_wireless_off = "res://assets/sprites/OrdiPink06.png",
			texture_wireless_ok = "res://assets/sprites/OrdiPink03.png",
			texture_wireless_wrong = "res://assets/sprites/OrdiPink04.png",
			
			fond_texture = "res://assets/sprites/window.png"
		},
		minitel = {
			unlock_level = 20,
			unlock_message = "ventil_minitel_upgrade_message",
			skin_menu_name = "minitel_computer_desc",
			
			texture_wire_off = "res://assets/sprites/minitel_wire_off.png",
			texture_wire_ok = "res://assets/sprites/minitel_wire_ok.png",
			texture_wire_wrong = "res://assets/sprites/minitel_wire_wrong.png",
			texture_wireless_off = "res://assets/sprites/minitel_wireless_off.png",
			texture_wireless_ok = "res://assets/sprites/minitel_wireless_ok.png",
			texture_wireless_wrong = "res://assets/sprites/minitel_wireless_wrong.png",
			
			fond_texture = "res://assets/sprites/window_minitel.png"
		}
	},
	autoclick = {
		max_upgrade_level = 9223372036854775807,
		
		autoclicks_list = ["hiclick"],
		hiclick = {
			unlock_level = 0,
			unlock_message = "hiclick_upgrade_message",
			skin_menu_name = "hiclick_desc",
			texture = "res://assets/sprites/mouse01.png"
		}
	},
	antivirus = {
		max_upgrade_level = 9223372036854775807,
		
		antivirus_list = ["abast"],
		abast = {
			unlock_level = 0,
			unlock_message = "abast_upgrade_message",
			texture = "res://assets/sprites/VirusPoulpe01.png"
		}
	},
	table = {
		max_upgrade_level = 3,
		
		table_list = ["bois", "camouflage", "space"],
		bois = {
			unlock_level = 0,
			unlock_message = "table_bois_upgrade_message",
			skin_menu_name = "table_bois_desc",
			texture = "res://assets/texture/70-707718_saturated-oak-texture-oak-wood-texture.jpg"
		},
		camouflage = {
			unlock_level = 2,
			unlock_message = "table_camouflage_upgrade_message",
			skin_menu_name = "table_camouflage_desc",
			texture = "res://assets/sprites/tableCamouflage01.png"
		},
		space = {
			unlock_level = 3,
			unlock_message = "table_space_upgrade_message",
			skin_menu_name = "table_space_desc",
			texture = "res://assets/sprites/space.png"
		}
	}
}

const virus_datas: Dictionary = {
	total_proba_weight = 23,
	
	virus_liste = ["poulpe", "pirate", "bug", "spider", "eve"],
	poulpe = {
		nominal_speed = 1000,
		proba_weight = 8
	},
	pirate = {
		nominal_speed = 600,
		proba_weight = 6
	},
	bug = {
		nominal_speed = 2000,
		proba_weight = 4
	},
	spider = {
		nominal_speed = 1000,
		proba_weight = 2
	},
	eve = {
		nominal_speed = 1000,
		proba_weight = 3
	}
}
